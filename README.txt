Структура проекта:

В папке models находятся классы двух сущностей: Product и Warehouse (POJO классы).

В папке dao находятся DAO классы для связи сущностей с БД (в данном случае со списком).

В папке documents находятся классы документов (принятие, продажа, перемещение товара).

В папке Service я решил разместить вспомогательные классы для документов с соответсвующими
полями article, quantity и price. Данные поля при заведении документов подтягиваются в соответствующие
поля классов. Price в Product, quantity в мапу Warehouse, а также в поле balance класса Product.

В папке controllers находятся необходимые контроллеры. В контроллерах документов для наглядности
я заполнил по одному документу.



Работа приложения:

1. Чтобы посмотреть или редактировать данные сущностей, необходимо пройти по соответствующим адресам:
Product, Warehouse - /product/{id} и /warehouse/{id} ,соответственно.
Документы Moving, Receipt, Sale - /moving/{id}, /receipt/{id}, /sale/{id} ,соответсвенно.
В соответствии с конвенцией REST - архитектуры.

Далее, чтобы выполнить один из четырех методов GET, POST, PUT, DELETE (для документов только
GET и POST) я пользовался таким способом:

Вызываем в браузере консоль нажатием F12 и далее вводим сообщение:

fetch('/product',
  {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({"id":1,"article":1,"name":"iPhone","lastBuyPrice":1000.0,"lastSalePrice":1500.0})
  }
).then(result => console.log(result))

Пример сообщения дан для сущности Product с ее полями.

2. Чтобы просмотреть отчеты, нужно пройти по адресу /report/product для просмотра списка товаров
с возможностью отфильтровать по товару и по адресу /report/balance для просмотра остатка товара
на складах с возможностью отфильтровать по складу.